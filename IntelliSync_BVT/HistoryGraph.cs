///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace IntelliSync_BVT
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The HistoryGraph recording.
    /// </summary>
    [TestModule("fd3cced8-eb1a-4872-9407-07c35e0d4293", ModuleType.Recording, 1)]
    public partial class HistoryGraph : ITestModule
    {
        /// <summary>
        /// Holds an instance of the IntelliSync_BVTRepository repository.
        /// </summary>
        public static IntelliSync_BVTRepository repo = IntelliSync_BVTRepository.Instance;

        static HistoryGraph instance = new HistoryGraph();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public HistoryGraph()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static HistoryGraph Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(0));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.COOLSENSORWaterTemp' at Center", repo.ComPentairPentairhome.COOLSENSORWaterTempInfo, new RecordItemIndex(1));
            repo.ComPentairPentairhome.COOLSENSORWaterTemp.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(2));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WaterTemp1' at Center", repo.ComPentairPentairhome.WaterTemp1Info, new RecordItemIndex(3));
            repo.ComPentairPentairhome.WaterTemp1.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(4));
            Delay.Duration(3000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "watertemp", repo.ComPentairPentairhome.WaterTemperatureHistoryHourlyDailyW, false, new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Daily' at Center", repo.ComPentairPentairhome.DailyInfo, new RecordItemIndex(6));
            repo.ComPentairPentairhome.Daily.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(7));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Daily", repo.ComPentairPentairhome.HistoryHourlyDailyWeeklyMonthlyVe, false, new RecordItemIndex(8));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Weekly' at Center", repo.ComPentairPentairhome.WeeklyInfo, new RecordItemIndex(9));
            repo.ComPentairPentairhome.Weekly.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(10));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Weekly", repo.ComPentairPentairhome.HistoryHourlyDailyWeeklyMonthlyVe, false, new RecordItemIndex(11));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Monthly' at Center", repo.ComPentairPentairhome.MonthlyInfo, new RecordItemIndex(12));
            repo.ComPentairPentairhome.Monthly.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(13));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Monthly", repo.ComPentairPentairhome.HistoryHourlyDailyWeeklyMonthlyVe, false, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.RCTView12' at Center", repo.ComPentairPentairhome.RCTView12Info, new RecordItemIndex(15));
            repo.ComPentairPentairhome.RCTView12.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(16));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AirTemp82' at Center", repo.ComPentairPentairhome.AirTemp82Info, new RecordItemIndex(17));
            repo.ComPentairPentairhome.AirTemp82.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(18));
            Delay.Duration(10000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Hourly", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee, false, new RecordItemIndex(19));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Daily' at Center", repo.ComPentairPentairhome.DailyInfo, new RecordItemIndex(20));
            repo.ComPentairPentairhome.Daily.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(21));
            Delay.Duration(4000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Daily", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee, false, new RecordItemIndex(22));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Weekly' at Center", repo.ComPentairPentairhome.WeeklyInfo, new RecordItemIndex(23));
            repo.ComPentairPentairhome.Weekly.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(24));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Weekly", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee, false, new RecordItemIndex(25));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Monthly' at Center", repo.ComPentairPentairhome.MonthlyInfo, new RecordItemIndex(26));
            repo.ComPentairPentairhome.Monthly.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(27));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Monthly", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee, false, new RecordItemIndex(28));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.RCTView13' at Center", repo.ComPentairPentairhome.RCTView13Info, new RecordItemIndex(29));
            repo.ComPentairPentairhome.RCTView13.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(30));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AssetsSrcCommonFeatureImagesNpHome1' at Center", repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesNpHome1Info, new RecordItemIndex(31));
            repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesNpHome1.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(32));
            Delay.Duration(10000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
